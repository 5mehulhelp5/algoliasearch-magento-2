/**
 * Bundled by jsDelivr using Rollup v2.79.1 and Terser v5.19.2.
 * Original file: /npm/@algolia/cache-browser-local-storage@4.24.0/dist/cache-browser-local-storage.esm.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
function e(e){const t=`algoliasearch-client-js-${e.key}`;let i;const r=()=>(void 0===i&&(i=e.localStorage||window.localStorage),i),s=()=>JSON.parse(r().getItem(t)||"{}"),n=e=>{r().setItem(t,JSON.stringify(e))};return{get:(t,i,r={miss:()=>Promise.resolve()})=>Promise.resolve().then((()=>{(()=>{const t=e.timeToLive?1e3*e.timeToLive:null,i=s(),r=Object.fromEntries(Object.entries(i).filter((([,e])=>void 0!==e.timestamp)));if(n(r),!t)return;const o=Object.fromEntries(Object.entries(r).filter((([,e])=>{const i=(new Date).getTime();return!(e.timestamp+t<i)})));n(o)})();const i=JSON.stringify(t);return s()[i]})).then((e=>Promise.all([e?e.value:i(),void 0!==e]))).then((([e,t])=>Promise.all([e,t||r.miss(e)]))).then((([e])=>e)),set:(e,i)=>Promise.resolve().then((()=>{const n=s();return n[JSON.stringify(e)]={timestamp:(new Date).getTime(),value:i},r().setItem(t,JSON.stringify(n)),i})),delete:e=>Promise.resolve().then((()=>{const i=s();delete i[JSON.stringify(e)],r().setItem(t,JSON.stringify(i))})),clear:()=>Promise.resolve().then((()=>{r().removeItem(t)}))}}export{e as createBrowserLocalStorageCache};export default null;
//# sourceMappingURL=/sm/63ecc853e84c0c3f12e7351728fa1176163c6da12a6b9eb09646e5f5531f124b.map
